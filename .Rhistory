library(tidyverse)
library(readxl)
surv_players <- read_excel("survivor_contestants.xlsx",
col_types = c("text", "text", "numeric",
"text", "text", "text", "text"))
colnames(surv_players) <- c("serial", "name", "age", "sex", "city", "state", "mode")
surv_players_clean <- surv_players %>%
# serial
separate(serial, c("serial", "to remove"), sep = "\\[") %>%
select(., -"to remove") %>%
# name
separate(name, c("name", "to remove"), sep = "\\[") %>%
select(., -"to remove") %>%
# age
separate(age, c("age", "to remove"), sep = "\\[") %>%
select(., -"to remove") %>%
# sex
separate(sex, c("sex", "to remove"), sep = "\\[") %>%
select(., -"to remove") %>%
# city
separate(city, c("city", "to remove"), sep = "\\[") %>%
select(., -"to remove") %>%
# state_s
separate(state, c("state", "to remove"), sep = "\\[") %>%
select(., -"to remove") %>%
# mode
separate(mode, c("mode", "to remove"), sep = "\\[") %>%
select(., -"to remove") %>%
mutate(serial = str_replace(serial, "2\\*", "2"),
serial = str_replace(serial, "5\\*", "5")) %>%
# player '*' did not participate in the end
filter(serial != "*") %>%
mutate(age = as.double(age))
unique(surv_players_clean$serial)
index <- which(surv_players_clean$serial == as.character(1))
index
updated_index <- c(index, length(surv_players_clean$serial))
updated_index_diff <- c(updated_index[1], diff(updated_index))
updated_index_diff
season <- c()
for (i in 1:length(updated_index_diff)) {
season <- c(season, rep(i, (updated_index_diff[i])))
}
season
surv_players_clean$season <- as.factor(season)
glimpse(surv_players_clean)
updated_index_2 <- c(1, updated_index + 1)
updated_index_2 <- updated_index_2[-length(updated_index_2)]
updated_index_2
location <- list()
for (i in 1:length(updated_index_2)) {
location[[i]] <- surv_players_clean[updated_index_2[i], ]
}
location <- do.call("rbind", location)
location <- location %>%
select(name, season)
location
library(hash)
hash <- hash(as.vector(location$season), location$name)
hash
location_col <- c()
for (i in 1:length(location$season)) {
location_col <- c(location_col, rep(hash[[toString(i)]], updated_index_diff[i]))
}
location_col
surv_players_clean$location <- location_col
surv_players_clean <- surv_players_clean[-updated_index_2, ]
View(surv_players_clean)
surv_players_clean.1 <- surv_players_clean %>%
separate(mode, c("mode", "to remove"), sep = "Applicant") %>%
select(., -"to remove") %>%
mutate(mode_binary = ifelse(mode == "", 1, 0)) %>%
select(., -"mode")
View(surv_players_clean.1)
head(surv_players_clean %>%
count(state) %>%
arrange(desc(n)), n = 10)
states <- map_data("state")
head(states, n = 5)
state_long <- tolower(unlist(lapply(surv_players_clean$state, openintro::abbr2state)))
surv_players_clean$region <- state_long
glimpse(surv_players_clean)
p <- surv_players_clean %>%
count(region) %>%
arrange(desc(n)) %>%
rename("Count" = n)
p1 <- states %>%
left_join(p, by = "region")
p2 <- p1[order(p1$order),]
head(p2, n = 5)
lon_lat_centerd <- read_excel("centered_long_lat_states_usa.xlsx")
colnames(lon_lat_centerd) <- c("region", "lat", "long")
lon_lat_centerd$region <- tolower(lon_lat_centerd$region)
p3 <- p %>%
left_join(lon_lat_centerd, by = "region")
p3 <- p3 %>%
filter(!is.na(region))
p3$region <- unlist(lapply(p3$region, openintro::state2abbr))
head(p3)
p3.1 <- p3 %>%
mutate(long = case_when(region == "WA" ~ long + 0.6,
region == "OR" ~ long + 0.3,
region == "NE" ~ long - 0.3,
region == "KS" ~ long - 0.3,
region == "LA" ~ long - 0.5,
region == "MI" ~ long - 0.1,
region == "MN" ~ long - 0.1,
region == "FL" ~ long + 0.1,
region == "TX" ~ long - 0.5,
region == "NE" ~ long - 0.1,
region == "KS" ~ long - 0.4,
region == "MA" ~ long + 2,
region == "NJ" ~ long + 0.5,
long == long ~ long),
lat = case_when(region == "NV" ~ lat + 1,
region == "UT" ~ lat - 1,
region == "NY" ~ lat + 1,
region == "CT" ~ lat - 1.5,
region == "NJ" ~ lat - 1,
region == "RI" ~ lat - 1,
lat == lat ~ lat))
write_csv(surv_players_clean.1, "Survivor Players (Clean).csv")
View(p3.1)
View(p2)
####################################################################################
write_csv(p2, "Main Heat Map.csv")
write_csv(p3.1, "Heat Map Labels.csv")
